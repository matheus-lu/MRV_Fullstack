### Lógica de programação ###
        O que é?
    1. Coerência de raciocínio, de ideias;
    2. Sequencia coerente, regular e necessária de acontecimentos, coisas.

    Contextualizar a lógica, buscando a melhor sequência de ações para solucionar um problema.

        Metacognição
    Pensar como você pensa

        Abstração
    concentrar nos aspectos essenciais de um contexto qualquer, ignorando características menos importantes.

    Ex Final:
        N1: 5
        N2: 7
        N3: 10
        N4: 3
        Média: (N1 + N2 + N3 + N4)/4

    ## Algoritmos ##
        Ex: Início-dia
                Acordei
                Levantei da cama
                Troquei de roupa
                Escovei os dentes
                Fui a padaria
                Tomei café
                Escovei os dentes
                Fui ao trabalho
                ...
            Fim-dia
    ## Pseudocódigo ##
        Portugol
        Ex (Jogo de lógica: Ovelha, lobo e repolho):
            Início-algoritmo
                Pegar Ovelha
                Atravessar (adiante)
                Deixar Ovelha
                Atravessar (voltar)
                Pegar repolho
                Atravessar (adiante)
                Deixar repolho
                Pegar Ovelha
                Atravessar (voltar)
                Deixar Ovelha
                Pegar lobo
                Atravessar (adiante)
                Deixar lobo
                Atravessar (voltar)
                Pegar Ovelha
                Atravessar (adiante)
                Deixar Ovelha
            Fim-algoritmo
    ## Fluxograma ##
    Documentação dos passos necessários para execução do programa.

### Estrutura de Dados ###
    # O que é? #
        Organizar os dados na memória, para que sejam utilizadas de forma correta.
    # Algoritmos #
        Conjunto de instruções estruturadas e ordenadas.
            ** Operações básicas:   
                Inserir Dados, 
                Excluir Dados, 
                Localizar um elemento, 
                Percorrer todos os itens constituintes da estrutura para visualização, 
                Classificar, que se resume em colocar os itens de dados em uma determinada ordem (numérica, alfabética, etc.).
    # Principais estruturas de dados #
        (https://portugol.dev/)
        1. Vetores e Matrizes
            Vetor - Armazena várias variáveis do mesmo tipo, indexado.
            Matriz - Vetor de Vetores, 2 ou mais dimensões.
        2. Registro
            Array que permite amazenar mais de um tipo de dado na mesma variável.
            Seus campos podem ser acessados usando o ponto (.) Ex (Registro: livro): livro.preco
        3. Lista
            Possuem tamanho ajustável, enquanto arrays, tamanho fixo.
            3.1 Ligadas
                Cada nó, conhece os nós posteriores, só pode ser adicionado valores ao fim da lista.
            3.2 Duplamente ligadas
                Bi-direcional, pode ser adicionado valores, tanto no fim, quanto no começo.
        4. Pilha (Stack)
            4.1 LIFO ou UEPS (Last in First out ou Ultimo a entrar Primeiro a sair) - Push - Inserir | Pop - Retirar ultimo da lista
            4.2 FIFO ou PEPS (First in First out ou Primeiro a entrar Primeiro a sair) - Enqueue - Inserir | Dequeue - Retirar primeiro da lista
        5. Filas
            Adimite remoção e inserção de elementos novos seguindo a regra FIFO.
        6. Árvore
            Organiza seus elementos de forma hierárquica, onde um fica no topo (raiz) e elementos subordinados a ele, que são chamados de nós ou folhas.
                Ex: [2, 8, 12, 15, 20, 23, 30] -- 15 seria a Raiz (meio da lista), facilita a busca
        7. Tabela Hash
            Usa Hashing para espalhar os elementos, fazendo com que os mesmo fiquem de forma não ordenada dentro do "array" que define a tabela
            # Por que espalhar? #
                A tabela hash permite a associação de "valores" a "chaves"
                Valores: é a posição ou índice onde o elemento se encontra
                Chave: Parte da informação que compõe o elemento a ser manipulado
        8. Grafos
            São estruturas que permitem programar a relação entre objetos
            Os objetos são os vértices ou "nós" do grafo
            Os relacionamentos são as arestas
            EX: Grafo
                6
                 \
                   4 -- 5
                   |    |\
                   |    | 1
                   |    |/
                   3 -- 2

### HTML5, CSS3, BOOTSTRAP, JS ###
    Tim Berners-Lee - Criador {HTML1: 1991, HTML2: 1995, HTML3: 1997, HTML4: 1997, HTML5: 2014}
    Elemento === Tag de abertura, atributo, conteudo, tag de fechamento
    
    ## CSS ##
        Cria regras de estilos para os seletores através de declarações.

        ** Border: largura estilo cor;
        * Web safe fonts
        ** list-style-type
    
    ## Bootstrap ##
        * Framework para desenvolvimento de sites responsivos
        * Vasta biblioteca
        * Mais conhecido
    
    ## Javascript ##
        * Interpretada - Rodada em tempo real, não precisa ser compilado.
        * Baseada em protótipos
        * Multiparadigma
        * Comumente utilizada em aplicações web client-side
        * Segue o padrão ECMAScript
        # Aplicações
            * Web
            * Mobile
            * Smartwatches
            * Games
            * IoT
            * APIs
        # DOM (Document Object Model)
            Estrutura dos elementos:
            
                    /> History
                    |
            Window -|-> Location
                    |               /> Heading Level 1 >> Text Node
                    |              /            /> Text Node
                    \> Document >> -> Paragraph > Form >> Input [type=text]
                                |            |       \> input [type=submit]
                                |             \> Anchor >> Text Node
                                    \> Heading Level 2 >> Text Node
                                    \>Anchor >> Text Node
        
            Frameworks e bibliotecas
                VueJS
                Angular
                React
                jQuery
        # Sintaxe Básica
            typeof() - Saber o tipo da variavel
            variaveis = var  | escopo global e local.
                        let  | escopo local de bloco.
                        const| escopo local de bloco. não muda valor.
            Manipulando Array:
                forEach() - itera um array
                push() - add item no final do array
                pop() - remove item no final do array
                shift() - remove item no inicio do array
                unshift() - add item no inicio do array
                indexof() - retorna o indice de um valor
                splice() - remove ou substitui um item pelo indice
                slice() - retorna uma parte de um array existente
            if ternario:
                [condicao] ? [instrucao1] : [instrucao2]
            switch case:
                switch (condicao){
                    case (condicao1):
                        ...
                        break;
                    case (condicao2):
                        ...
                        break;
                    default: // se num case for valido, cai no default
                        ...
                }
            funcao sem nome:
                var variavel = function() {...;}
            arrow function:
                var funcao = () => {...;}
            # Operadores
                Lógicos
                && - and
                || - or
                !  - not
                *** Comparação
                    ==  Igual a
                    === Mesmo valor e mesmo tipo
                    !=  Diferente
                    !== Valor e tipos diferentes
        Empty, Null, undefined (vazio, nulo [tem o valor null] e undefined [não definido])

        # **** Tipos de funcao ****
            function nome(parametros){
                //instrucoes
                return; // valor de returno
            }
            funcao anonima (nao tem nome)
                const soma = function (a, b) {
                    return a + b;
                }
                soma(1, 2) // 3
                soma(2, 5) // 7
            funcao autoinvocavel | IIFE (Immediately invoked function expression) [Usa um (); logo apos a funcao para invocala imediatamente]
                Ex:
                (
                    function(){
                        let name = "Digital Innovation One";
                        return name;
                    }
                )(//paramentros se necessario);
            funcao callbacks
                Passada como argumento para outra funcao
                Ex: 
                    const calc = function(operacao, num1, num2){
                        return operacao(num1, num2);
                    }

                    const soma = function(num1, num2){
                        return num1 + num2;
                    }

                    const sub = function(num1, num2){
                        return num1 - num2;
                    }

                    const resultSoma = calc(soma, 1, 2);
                    const resultSub = calc(sub, 1, 2);
        
        Valores padrao (variavel = valorPadrao)
        
        Objeto "Arguments" (args) - Iteravel
            utiliza-se arguments como a variavel da funcao, onde arguments -> todos os argumentos enviados para a funcao
        
        Arrays e objetos
            
            spread: uma forma de lidar separadamente com elementos do array
                function sum(x, y, z){
                    return x + y + z;
                }
                const numbers = [1, 2, 3];
                sum(...numbers); // ... transforma cada parte do array em um elemente independente
            
            rest: combina os arugementos em um array
                function confereTamanho(...args) {
                    return args.length
                }
                confereTamanho() // 0
                confereTamanho(1, 2) // 2
                confereTamanho(3, 4, 5) // 3
        
        Objetos - Object Destructuring
            Entre chaves {} podemos filtrar apenas os dados que nos interessam em um objeto.
                ex: 
                    const user = {
                        id: 42,
                        displayName: 'jdoe',
                        fullName: {
                            firstName: 'John',
                            lastName: 'Doe'
                        }
                    };


                    function userID({id}) {
                        return id; // funcao procura a chave ID dentro do objeto user
                    }

                    function getFullName({fullName: {firstName: first, lastName: last}}){
                        return `${first} ${last}`;
                    }

                    userID(user)
                    // 42

                    getFullName(user)
                    // John Doe
        
        # Loops
            if/else
                if () {
                    ...;
                } else if {
                    ...;
                } else {
                    ...;
                }
            switch/case - compara o tipo e valor sempre === | sempre precisa de um default
                switch (condicao) {
                    case valor1:
                        return x;
                    case valor2:
                        return y;
                    case valor3:
                        return z;
                    default:
                        return w;
                }
            for
                for (let i = 0; i < tamanho; i++) {
                    ...;
                }
                for (variavel in objeto) // retorna todas as propriedades

                for (variavel in objeto) 
                    objeto[variavel] // retorna somente o valor das propriedades
                
                for (letra of palavra) // retorna cada letra da palavra
                
                for (numero of array) // retorna cada valor de cada indice do array

            while
                while(numero <= x) // executa ate que a condicao seja falsa

                do {
                    ...;
                } while (numero <= x) // executa pelo menos 1 vez antes de fazer a verificacao, mesmo que ela ja comece como falsa
        
        # This
            Call | Manda o objeto que deseja usar. Pode passar paramentros separados por virgula
                getSomething.call(objeto);
            
            Apply | pode passar paramentros dentro de um array
                getSomething.apply(objeto);

            Bind | clona a estrutura da funcao onde e chamada e aplica o valor do objeto passado como parametro.
                const retornaNomes = function(){
                    return this.nome;
                };
                let bruno = retornaNomes.bind({nome: 'Bruno'});
                bruno();
                // Bruno
        
        # Arrow function | Não faz hoisting (a funcao não pode ser chamada antes de ser criada), sempre em uma const
            sintaxe: 
                const helloWorld = () => {
                    ...;
                    return "Hello World";
                }

                const helloWorld = () => "Hello World"; // quando a funcao for pequena, não necessita de return
                const soma = (a, b) => a + b;
            restricoes:
                - nao pode usar as funcoes de this
                - nao existe arguments
                - nao pode usar o construtor (new MeuObjeto())
        
        # Map | const myMap = new Map()
            - Colecao de arrays no formado [chave, valor];
            - Pode ser iterado por for... of

            Metodos:
                myMap.set('apple', 'fruit'); // Map(1) {"apple" => "fruit"}
                myMap.get("apple"); // "fruit"
                myMap.delete("apple"); // true
                myMap.get("apple"); // undefined
            
            Map vs Objeto
                Maps podem ter chaves de qualquer tipo;
                Possuem length;
                São mais faceis de iterar;
                Utilizado quando o valor das chaves é desconhecido;
                Os valores tem o mesmo tipo.
        
        # Set | 
            Armazenam apenas valores ÚNICOS (não se repetem nunca)

            Métodos:
                const mySet = new Set();
                mySet.add(1);
                mySet.add(5);

                mySet.has(1); // true
                mySet.has(3); // false

                mySet.delete(5);
            
            Set vs Arrays
                Possuem valores unicos;
                Em vez da propriedade length, usa-se size;
                Não possui os métodos map, filter, reduce, etc.
        
        # Tratamento de Erros
            ECMAScript Error
                Composto por: Mensagem, nome, linha, call stack.
            
            DOMException
                Erros relacionados ao DOM
            
            Throw | Return
                Return - retorna o valor especificado
                Throw - retorna um erro
            
            Try...Catch | Try...Catch...Finally 
                Catch captura o erro, se ocorrer; 
                Finally sempre é executado.

            Manipular objeto Error
                new Error(message, fileName, lineNumber) //fileName e lineNumber não sao padrao em todos os navegadores, olhar a documentacao
                // todos os paramentros sao opcionais

                const MeuErro = new Error('Mensagem Inválida');
                MeuErro.name = 'InvalidMessage'

                throw MeuErro;

        # Assincronicidade | não ocorre ou não se efetiva ao mesmo tempo
            Synchronous
                Client - Make request -> espera resposta do server, depois continua a aplicacao
            Asynchronous
                Client - Make request -> continua a aplicacao e pega a resposta do servidor ao mesmo tempo

            Promises - Inicialmente seu valor é desconhecido. Ela pode ser resolvida ou rejeitada.

                Pending      Resolved    Pending
                promise ->  .then()  ->  promise
                        ↘   .catch()    ↗
                
                3 estados - Pending, Fulfilled, Rejected

                Exemplo sintaxe:
                    const myPromise = new Promise((resolve, reject) => {
                        window.setTimeout(() => {
                            resolve(console.log('Resolvida!'));
                        }, 2000);
                    });

                    await myPromise
                            .then((result) => result + ' passando pelo then');
                            .then((result) => result + ' e agora acabou!');
                            .catch((err) => console.log(err.message));
            
            Async/await
                async function resolvePromise() {
                    const myPromise = new Promise((resolve, reject) => {
                        setTimeout(() => {
                            resolve(console.log('Resolvida'));
                        }, 3000);
                    });

                    const resolved = await myPromise
                            .then((result) => result + ' passando pelo then')
                            .then((result) => result + ' e agora acabou!')
                            .catch((err) => console.log(err.message))
                    
                    return resolved;
                };
        
        # APIs
            Uma forma de intermediar os resultados do back-end com o que é apresentado no front-end;
            Pode-se acessa-la por meio de URLs.
            .json
        
            # fetch -- Precisa utilizar o await quando usar o fetch | Retorna uma promise
                fetch(url, options)
                    .then(response => response.json())
                    .then(json => console.log(json))
                Exs:
                    fetch('https://endereco-api.com', {
                        method: 'GET',
                        cache: 'no-cache',

                    })
                        .then(response => response.json())
                        .then(json => console.log(json))
                    
                    -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                    fetch('https://endereco-api.com', {
                        method: 'POST',
                        cache: 'no-cache',
                        body: JSON.stringify(data)

                    })
                        .then(response => response.json())
                        .then(json => console.log(json))